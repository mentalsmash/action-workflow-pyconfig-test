name: Find prunable docker layers
description: |
  Find prunable docker layers

inputs:
  repository:
    description: The release tracking repository
    required: true
  path:
    description: The directory where the repository was cloned
    default: src/tracker
  storage:
    description: Subdirectory within the repository the tracking files are stored.
    default: releases
  track:
    description: The track for the new release
    required: true
  version:
    description: A unique version id for the release
    required: true
  created_at:
    description: Timestamp for the release.
  match-re:
    description: |
      Match versions using a regular expression over the string "{created_at}__{version}".
      This feature is experimental, and you may run into "quote hell".
outputs:
  layers:
    description: List of prunable docker layers.
    value: ${{ steps.find.outputs.LAYERS }}
  versions:
    description: List of prunable versions.
    value: ${{ steps.find.outputs.VERSIONS }}

runs:
  using: "composite"
  steps:
    - name: Find matching releases
      id: find
      shell: python
      run: |
        import sys
        from pathlib import Path
        src_dir = Path("${{ github.action_path }}").parent.parent / "src"
        sys.path.insert(0, str(src_dir))
        
        from release_tracker import ReleaseTracker

        tracker = ReleaseTracker(
          repository="${{ inputs.repository }}",
          path="${{ inputs.path }}",
          user=("${{ inputs.repository-user-name }}", "${{ inputs.repository-user-email }}"),
          storage="${{ inputs.storage }}")

        prunable_versions, prunable_layers = tracker.find_prunable_docker_layers(
          track="${{ inputs.track }}",
          prunable_versions="""
            ${{ inputs.prunable-versions }}
          """)
        
        print("::group::Prunable Layers")
        for layer in prunable_layers:
          print(layer)
        print("::endgroup::")

        print("::group::Prunable Versions")
        for vid in prunable_versions:
          print(vid)
        print("::endgroup::")

        import os
        from pathlib import Path
        
        with Path(os.environ["GITHUB_OUTPUT"]).open("a") as output:
          output.write("LAYERS<<EOF\n")
          for match in prunable_layers:
            output.write(match)
            output.write("\n")
          output.write("EOF\n")

          output.write("VERSIONS<<EOF\n")
          for match in prunable_versions:
            output.write(match)
            output.write("\n")
          output.write("EOF\n")

