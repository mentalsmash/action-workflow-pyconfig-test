name: Add a new entry to the release tracking directory
description: |
  Add an entry to the release tracking directory for a new project release.

  The action will add a new entry to the release track's log, and save
  all provided files into a subdirectory named after the release
  and the release timestamp.

  The log file has the following syntax:

  ```json
  [
    {
      "version": "<version>"
      "created_at": "%Y-%m-%dT%H:%M:%SZ",
      ]
    }
  ]
  ```

inputs:
  repository:
    description: The release tracking repository
    required: true
  path:
    description: The directory where the repository was cloned
    default: src/tracker
  storage:
    description: Subdirectory within the repository the tracking files are stored.
    default: releases
  track:
    description: The track for the new release
    required: true
  version:
    description: A unique version id for the new release
    required: true
  created_at:
    description: A timestamp for the new releases. Automatically assigned if unspecified.
  files:
    description: A newline-separated list of files to copy in to the log directory.
  commit:
    description: Commit changes to the local repository. Set to empty to disable.
    default: yes
  push:
    description: Push new commit to remote repository. Set to empty to disable.
    default: yes

outputs:
  entry:
    description: Id of the generated entry
    value: ${{ steps.add.outputs.ENTRY }}
  created_at:
    description: The timestamp for the new entry
    value: ${{ steps.add.outputs.CREATED_AT }}

runs:
  using: "composite"
  steps:
    - name: Create release log entry
      shell: python
      id: add
      run: |
        import yaml
        import json
        import sys
        from pathlib import Path
        src_dir = Path("${{ github.action_path }}").parent.parent / "src"
        sys.path.insert(0, str(src_dir))

        from release_tracker import ReleaseTracker

        tracker = ReleaseTracker(
          repository="${{ inputs.repository }}",
          path="${{ inputs.path }}",
          storage="${{ inputs.storage }}")

        track = "${{ inputs.track }}".strip()
        entry = tracker.add(
          track=track,
          version="${{ inputs.version }}",
          created_at="${{ inputs.created-at }}",
          files="""
            ${{ inputs.files }}
          """,
          commit=bool("${{ inputs.commit }}"),
          push=bool("${{ inputs.push }}"))

        summary = {
          "entry": entry,
          "repository": tracker.repository,
          "path": str(tracker.path),
          "storage": str(tracker.storage),
          "track": track,
        }
        with Path("${{ inputs.summary }}").open("w") as output:
          output.write(json.dumps(summary))
          output.write("\n")

        print("::group::New Release")
        print(yaml.safe_dump(entry))
        print("::endgroup::")

        import os
        from pathlib import Path
        with Path(os.environ["GITHUB_OUTPUT"]).open("a") as output:
          output.write("ENTRY=")
          output.write(f"{entry['created_at']}__{entry['version']}")
          output.write("\n")

          output.write("CREATED_AT=")
          output.write(entry["created_at"])
          output.write("\n")

