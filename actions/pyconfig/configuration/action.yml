name: Python-based Workflow Configuration
description: |
  This action allows you to load a static configuration, enhance it
  using Python code, and then output it as a JSON object.
inputs:
  clone-dir:
    description: Directory where to clone the repository
    required: false
    default: src/repo
  path:
    description: Local path where the configuration is located.
    required: false
    default: .pyconfig
  settings:
    description: Static configuration files to load from the configuration directory.
    required: false
    default: settings.yml
  workflow:
    description: Run a configuration function for the specified workflow.
    required: false
    default: ''
  github:
    description: The workflow's `github` context as a JSON string.
    required: false
    default: ''
  inputs:
    description: The workflow's `inputs` context as a JSON string.
    required: false
    default: ''
  outputs:
    description: A JSON file with the final configuration.
    required: false
    default: .pyconfig.json
outputs:
  settings:
    description: The loaded settings in JSON format.
    value: ${{ steps.settings.outputs.SETTINGS }}
  
runs:
  using: "composite"
  steps:
    - name: Load workflow settings
      id: settings
      shell: python
      run: |
        import os
        import json
        from pathlib import Path

        import sys
        repo_dir = Path("${{ github.action_path }}").parent.parent.parent

        sys.path.insert(0, str(repo_dir))
        from pyconfig import configuration

        workflow = "${{ inputs.workflow }}"

        clone_dir = Path("${{ inputs.clone-dir }}")

        config_dir = clone_dir / "${{ inputs.path }}"

        github = """${{ inputs.github }}"""
        if not github:
          github = """${{ toJson(github) }}"""

        inputs = """${{ inputs.inputs }}"""

        sys.path.insert(0, str(config_dir))
        _, _, cfg = configuration(
          clone_dir=clone_dir,
          config_dir=config_dir,
          github=github if github else None,
          inputs=inputs if inputs else None,
          workflow=workflow if workflow else None,
          as_tuple=False)

        cfg_json = json.dumps(cfg)

        with Path(os.environ["GITHUB_OUTPUT"]).open("a") as output:
          output.write("SETTINGS<<EOF\n")
          output.write(cfg_json)
          output.write("\n")
          output.write("EOF\n")

        Path("${{ inputs.output }}").write_text(cfg_json)
