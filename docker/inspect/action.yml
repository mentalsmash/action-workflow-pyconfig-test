name: Inspect Multi-Platform Image
description: |
  Inspect the manifest of one or more multi-platform images, and create a log of referenced images,
  which can be used to delete the layers even if the images are untagged.

  The output file is a JSON object with the following fields:

  - `images`: a dictionary, indexed over the image tags, containing
     all image manifests.
  - `layers`: a lookup object to map layer hashes to images
     referencing them.
inputs:
  images:
    description: The images to inspect
    required: true
  output:
    description: File to generate.
    required: true
  registry:
    description: Image registry used for authentication.
    required: false
    default: ''
  registry-token:
    description: Token for authenticating on the registry.
    required: false
    default: ''
  registry-user:
    description: User for authenticating on the registry.
    required: false
    default: ''
outputs:
  manifest:
    description: The manifest in JSON format.
    value: ${{ steps.manifest.outputs.MANIFEST }}
  layers:
    description: New-line separeted list of hashes.
    value: ${{ steps.layers.outputs.LAYERS }}
  files:
    description: New-line separeted list of generated files.
    value: ${{ steps.files.outputs.FILES }}
runs:
  using: "composite"
  steps:
    - name: Log in to registry
      uses: docker/login-action@v3
      if: inputs.registry-token
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-user }}
        password: ${{ inputs.registry-token }}

    - name: Retrieve image manifests and write output
      shell: python
      run: |
        import sys
        sys.path.insert(0, "${{ github.action_path }}/src")
        from docker_helper import inspect
        inspect(
          images="""
            ${{ inputs.images }}
          """,
          output="${{ inputs.output }}",
          output_prefix="${{ inputs.output-prefix }}",
          output_suffix="${{ inputs.output-suffix }}")
